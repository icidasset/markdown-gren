{"Markdown":{"name":"Markdown","comment":" Markdown.\n\n@docs parse, jsonFrontmatter, toHtml\n\n","unions":[],"aliases":[],"values":[{"name":"jsonFrontmatter","comment":" JSON frontmatter parser.\n","type":"Json.Decode.Decoder metadata -> Markdown.Parser.Frontmatter.Types.Parser metadata"},{"name":"parse","comment":" Parse an entire markdown document with or without frontmatter.\n","type":"{ frontmatter : Maybe.Maybe (Markdown.Parser.Frontmatter.Types.Parser metadata) } -> String.String -> { metadata : Maybe.Maybe metadata, blocks : Array.Array Markdown.Block.Block }"},{"name":"toHtml","comment":" Transform a Markdown block into HTML.\n","type":"Markdown.Block.Block -> Transmutable.Html.Html msg"}],"binops":[]},"Markdown.Block":{"name":"Markdown.Block","comment":" Block-level types and operations.\n\n@docs Block\n\n","unions":[{"name":"Block","comment":" Block elements.\n","args":[],"cases":[["BlockQuote",["Array.Array Markdown.Block.Block"]],["CodeBlock",["{ body : String.String, language : Maybe.Maybe String.String }"]],["Heading",["{ level : Basics.Int }","Array.Array Markdown.Inline.Inline"]],["HtmlBlock",["Markdown.Inline.Html"]],["HtmlBlockNode",["{ tagName : String.String, attributes : Dict.Dict String.String String.String }","Array.Array Markdown.Block.Block"]],["Inline",["Markdown.Inline.Inline"]],["OrderedLooseList",["{ start : Basics.Int }","Array.Array (Array.Array Markdown.Block.Block)"]],["OrderedTightList",["{ start : Basics.Int }","Array.Array (Array.Array Markdown.Inline.Inline)"]],["Paragraph",["Array.Array Markdown.Inline.Inline"]],["ThematicBreak",[]],["UnorderedLooseList",["Array.Array (Array.Array Markdown.Block.Block)"]],["UnorderedTightList",["Array.Array (Array.Array Markdown.Inline.Inline)"]]]}],"aliases":[],"values":[],"binops":[]},"Markdown.Inline":{"name":"Markdown.Inline","comment":" Inline-level types and operations.\n\n@docs Inline, Html\n\n","unions":[{"name":"Html","comment":" Non-recursive HTML elements.\n","args":[],"cases":[["Cdata",["String.String"]],["Comment",["String.String"]],["Declaration",["String.String"]],["ProcessingInstruction",["String.String"]]]},{"name":"Inline","comment":" Inline elements.\n","args":[],"cases":[["Emphasis",["{ char : Char.Char, times : Basics.Int }","Array.Array Markdown.Inline.Inline"]],["HardLineBreak",[]],["InlineCode",["String.String"]],["InlineHtml",["Markdown.Inline.Html"]],["InlineHtmlNode",["{ tagName : String.String, attributes : Dict.Dict String.String String.String }","Array.Array Markdown.Inline.Inline"]],["Image",["{ alt : String.String, url : String.String }"]],["Link",["{ text : String.String, url : String.String }"]],["Text",["String.String"]]]}],"aliases":[],"values":[],"binops":[]},"Markdown.Parser":{"name":"Markdown.Parser","comment":" Markdown parsing.\n\n@docs parse, jsonFrontmatter\n\n","unions":[],"aliases":[],"values":[{"name":"jsonFrontmatter","comment":" JSON frontmatter parser.\n","type":"Json.Decode.Decoder metadata -> Markdown.Parser.Frontmatter.Types.Parser metadata"},{"name":"parse","comment":" Parse an entire markdown document with or without frontmatter.\n","type":"{ frontmatter : Maybe.Maybe (Markdown.Parser.Frontmatter.Types.Parser metadata) } -> String.String -> { metadata : Maybe.Maybe metadata, blocks : Array.Array Markdown.Block.Block }"}],"binops":[]},"Markdown.Parser.Blocks":{"name":"Markdown.Parser.Blocks","comment":" Block-level parsers.\n\n@docs parse, parseRaw, parser, rawBlockParser, RawBlock\n\n","unions":[{"name":"RawBlock","comment":"","args":[],"cases":[["RawBlock",["Markdown.Block.Block"]],["RawBlockQuote",["String.String"]],["RawFencedCode",["{ body : String.String, language : Maybe.Maybe String.String }"]],["RawHeading",["{ level : Basics.Int }","String.String"]],["RawHtml",["Markdown.Inline.Html"]],["RawHtmlOpening",["Markdown.Parser.Html.Opening"]],["RawHtmlClosing",["Markdown.Parser.Html.Closing"]],["RawHtmlText",["String.String"]],["RawIndentedCode",["String.String"]],["RawOrderedList",["{ leadingSpaces : Basics.Int, start : Basics.Int, symbol : String.String }","Array.Array (Array.Array String.String)"]],["RawParagraph",["{ closed : Basics.Bool }","String.String"]],["RawThematicBreak",[]],["RawUnorderedList",["{ leadingSpaces : Basics.Int, symbol : String.String }","Array.Array (Array.Array String.String)"]]]}],"aliases":[],"values":[{"name":"parse","comment":" Parse blocks.\n","type":"String.String -> Result.Result (Array.Array Parser.DeadEnd) (Array.Array Markdown.Block.Block)"},{"name":"parseRaw","comment":" Parse blocks without parsing the inline elements.\n","type":"String.String -> Result.Result (Array.Array Parser.DeadEnd) (Array.Array Markdown.Parser.Blocks.RawBlock)"},{"name":"parser","comment":" Top-level block parser.\n","type":"Parser.Parser (Array.Array Markdown.Block.Block)"},{"name":"rawBlockParser","comment":" Raw block parser.\n","type":"Array.Array Markdown.Parser.Blocks.RawBlock -> Parser.Parser (Parser.Step (Array.Array Markdown.Parser.Blocks.RawBlock) (Array.Array Markdown.Parser.Blocks.RawBlock))"}],"binops":[]},"Markdown.Parser.Frontmatter.Json":{"name":"Markdown.Parser.Frontmatter.Json","comment":" JSON frontmatter.\n\n@docs parser\n\n","unions":[],"aliases":[],"values":[{"name":"parser","comment":" JSON frontmatter parser.\n","type":"Json.Decode.Decoder metadata -> Markdown.Parser.Frontmatter.Types.Parser metadata"}],"binops":[]},"Markdown.Parser.Frontmatter.Types":{"name":"Markdown.Parser.Frontmatter.Types","comment":" Frontmatter types.\n\n@docs Parser\n\n","unions":[],"aliases":[{"name":"Parser","comment":" Frontmatter parser type.\n","args":["m"],"type":"Parser.Parser { metadata : Maybe.Maybe m, markdown : String.String }"}],"values":[],"binops":[]},"Markdown.Parser.Inlines":{"name":"Markdown.Parser.Inlines","comment":" Inline-level parsers.\n\n@docs parse, parser\n\n","unions":[],"aliases":[],"values":[{"name":"parse","comment":" Parse inlines.\n","type":"String.String -> Result.Result (Array.Array Parser.DeadEnd) (Array.Array Markdown.Inline.Inline)"},{"name":"parser","comment":" Top-level inline parser.\n","type":"Parser.Parser (Array.Array Markdown.Inline.Inline)"}],"binops":[]},"Markdown.Transmutationist":{"name":"Markdown.Transmutationist","comment":" Markdown transformations.\n\n@docs toHtml, inlineToHtml\n\n","unions":[],"aliases":[],"values":[{"name":"inlineToHtml","comment":" Transform an inline Markdown element into HTML.\n","type":"Markdown.Inline.Inline -> Transmutable.Html.Html msg"},{"name":"toHtml","comment":" Transform a Markdown block into HTML.\n","type":"Markdown.Block.Block -> Transmutable.Html.Html msg"}],"binops":[]}}